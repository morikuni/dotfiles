if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle/'))
	NeoBundleFetch 'Shougo/neobundle.vim'

	"ファイルブラウザ
	NeoBundle 'Shougo/vimfiler'

	"カラースキーマ
	NeoBundle 'tomasr/molokai'

	"ステータスバーの拡張
	NeoBundle 'itchyny/lightline.vim'

	"複数行コメントアウト
	NeoBundle 'tyru/caw.vim'

	"Scalaのシンタックスハイライト
	NeoBundle 'derekwyatt/vim-scala'

	"カーソル移動
	NeoBundle 'Lokaltog/vim-easymotion'

	"unite.vim
	NeoBundle 'Shougo/unite.vim'

	"最近開いたファイルをuniteで表示
	NeoBundle 'Shougo/neomru.vim'

	"vimproc.vim
	NeoBundle 'Shougo/vimproc.vim', {
	\ 'build' : {
	\	  'windows' : 'tools\\update-dll-mingw',
	\	  'cygwin' : 'make -f make_cygwin.mak',
	\	  'mac' : 'make -f make_mac.mak',
	\	  'linux' : 'make',
	\	  'unix' : 'gmake',
	\	 },
	\ }

	"Tabで補完
	NeoBundle 'ervandew/supertab'

	"undo履歴をツリー表示
	NeoBundle 'sjl/gundo.vim'

	"Markdownのリアルタイムプレビュー
	NeoBundle 'kannokanno/previm'

	"ヤンク履歴をさかのぼってペースト
	NeoBundle 'LeafCage/yankround.vim'

	"trailを赤色表示
	NeoBundle 'bronson/vim-trailing-whitespace'

	"tagを一覧表示
	NeoBundle 'majutsushi/tagbar'

	"インクリメンタル検索を便利に
	NeoBundle 'haya14busa/incsearch.vim'
	NeoBundle 'haya14busa/incsearch-easymotion.vim'

	"Gitの編集差分を表示
	NeoBundle 'airblade/vim-gitgutter'

	"補完
	NeoBundle 'Shougo/neocomplete.vim'

	"テキストオブジェクト強化
	NeoBundle 'tpope/vim-surround'
	NeoBundle 'tpope/vim-repeat'

	"検索時に総数と現在位置を表示
	NeoBundle 'osyo-manga/vim-anzu'

	"ウインドウを移動したときにサイズを自動調整
	NeoBundle 'justincampbell/vim-eighties'

	"インデント可視化
	NeoBundle 'Yggdroot/indentLine'

	"Rust
	NeoBundle 'rust-lang/rust.vim'

	"Go
	NeoBundle 'fatih/vim-go'

	"Haskell(Syntax + Indent)
	NeoBundle 'neovimhaskell/haskell-vim'

	"Haskell(Completion)
	NeoBundle 'eagletmt/neco-ghc'

	"テキストオブジェクト拡張
	NeoBundle 'kana/vim-textobj-user'
	NeoBundle 'kana/vim-textobj-indent'

	"fzf
	NeoBundle 'junegunn/fzf'
	NeoBundle 'junegunn/fzf.vim'

	NeoBundle 'mrk21/yaml-vim'

	NeoBundle 'tpope/vim-fugitive'

	" nginxのsyntax highlight
	NeoBundle 'vim-scripts/nginx.vim'

call neobundle#end()

filetype plugin indent on
NeoBundleCheck

"----------
" vimfiler
"----------
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
let g:vimfiler_safe_mode_by_default = 0
nnoremap <C-e> :VimFiler -toggle<CR>

"----------
" molokai
"----------
colorscheme molokai

"----------
" lightline
"----------
set laststatus=2
let g:lightline = {
	\ 'active': {
	\	'left': [ [ 'mode' ], [ 'filename' ] ],
	\	'right': [ [ 'lineinfo' ], [ 'fileinfo' ] ]
	\ },
	\ 'inactive': {
	\	'left': [ ['filename'] ],
	\	'right': []
	\ },
	\'component_function': {
	\	'mode': 'MyMode',
	\	'filename': 'MyFileName',
	\	'fileinfo': 'MyFileInfo',
	\	'lineinfo': 'MyLineInfo',
	\ }
\ }

function! MyMode()
	let l:ps = ''
	if &paste
		let l:ps = ' | P'
	endif
	let l:ro = ''
	if &ro
		let l:ro = ' | RO'
	endif
	let l:mod = ''
	if &modified
		let l:mod = ' | +'
	endif
	if !&modifiable
		let l:mod = ' | -'
	endif
		return lightline#mode() . l:ps . l:ro . l:mod
endfunction

function! MyFileName()
	let l:fns = expand('%:t')
	let l:fnl = expand('%')
	return winwidth('.') >=
		\   strlen(l:fnl)
		\ + strlen(MyMode())
		\ + 35
		\ ? l:fnl : l:fns
endfunction

function! MyFileInfo()
	let l:ff = &fileformat
	let l:fe = (strlen(&fenc) ? &fenc : &enc)
	let l:ft = (strlen(&filetype) ? &filetype : 'no')
	let l:fi = l:ff . ' ' . l:fe . ' ' . l:ft
	return winwidth('.') >=
		\   strlen(MyMode()) + 2
		\ + strlen(MyFileName()) + 2
		\ + strlen(l:fi) + 2
		\ ? l:fi : ''
endfunction

function! MyLineInfo()
	let l:cl = line('.')
	let l:ll = line('$')
	let l:li = printf('%4d/%d', l:cl, l:ll)
	return winwidth('.') >=
		\   strlen(MyMode()) + 2
		\ + strlen(MyFileName()) + 2
		\ + strlen(MyFileInfo()) + 2
		\ + strlen(l:li) + 2
		\ ? l:li : ''
endfunction

"----------
" caw.vim
"----------
map ,, <Plug>(caw:hatpos:toggle)

"----------
" unite.vim
"----------
let g:unite_enable_start_insert=1
nnoremap <silent> ,b :<C-u>Unite buffer<CR>
nnoremap <silent> ,s :<C-u>Unite grep:% -no-quit<CR>
nnoremap <silent> ,g :<C-u>Unite grep:. -no-quit<CR>
nnoremap <silent> ,f :<C-u>Unite find<CR>

"Uniteのgrepにagを使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

"----------
" Gundo
"----------
nnoremap <F5> :GundoToggle<CR>
let g:gundo_close_on_revert=1

"----------
" previm
"----------
if has('mac')
	let g:previm_open_cmd = 'open -a Safari'
endif

"----------
" yankround
"----------
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

"----------
" vim-trailing-whitespace
"----------
let g:extra_whitespace_ignored_filetypes = ['unite']

"----------
" supertab
"----------
let g:SuperTabDefaultCompletionType = '<c-n>'

"----------
" tagbar
"----------
nnoremap <F8> :TagbarToggle<CR>
let g:tagbar_type_scala = {
	\ 'ctagstype' : 'scala',
	\ 'sro'       : '.',
	\ 'kinds'     : [
		\ 'p:packages',
		\ 'T:types:1',
		\ 't:traits',
		\ 'o:objects',
		\ 'O:case objects',
		\ 'c:classes',
		\ 'C:case classes',
		\ 'm:methods',
		\ 'V:values:1',
		\ 'v:variables:1'
	\ ]
\ }


"----------
" EasyMotion
"----------
"デフォルトのショートカットを無効化
let g:EasyMotion_do_mapping = 0
"スマートケースを使用
let g:EasyMotion_smartcase = 1

"----------
" incsearch & (anzu) & easymotion
"----------
map /  <Plug>(incsearch-forward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)<Plug>(anzu-update-search-status-with-echo)
map N  <Plug>(incsearch-nohl-N)<Plug>(anzu-update-search-status-with-echo)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1, 'is_stay': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction
nnoremap <silent><expr> s incsearch#go(<SID>incsearch_config())

"----------
" neocomplete
"----------
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#auto_completion_start_length = 1
let g:neocomplete#max_keyword_width = 150
if !exists('g:neocomplete#sources')
	let g:neocomplete#sources = {}
endif
let g:neocomplete#sources._ = ['buffer', 'member', 'dictionary', 'file', 'omni']
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.haskell = '\%(\u\w*\.\)\+[[:alnum:]_'']*\|[[:alpha:]_''][[:alnum:]_'']*'
if !exists('g:neocomplete#sources#dictionary#dictionaries')
	let g:neocomplete#sources#dictionary#dictionaries = {}
endif
let g:neocomplete#sources#dictionary#dictionaries.scala = '~/.vim/dict/scala.dict'
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"

"----------
" eighties
"----------
let g:eighties_enabled = 1
let g:eighties_minimum_width = 100
let g:eighties_bufname_additional_patterns = ['__Gundo__', '__Gundo_Preview__']

"----------
" vim-go
"----------
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

"----------
" neco-ghc
"----------
let g:haskellmode_completion_ghc = 0
augroup FileTypeSettingNeco
	autocmd!
	autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

"----------
" ctrlp
"----------
if executable('ag')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
endif

"----------
" fzf
"----------
nnoremap <C-p> :FZF<CR>
let g:fzf_history_dir = '~/.vim/fzf-history'
nnoremap ,r :Buffers<CR>

"----------
" vim-gitgutter
"----------
nnoremap gn :GitGutterNextHunk<CR>
nnoremap gp :GitGutterPrevHunk<CR>
